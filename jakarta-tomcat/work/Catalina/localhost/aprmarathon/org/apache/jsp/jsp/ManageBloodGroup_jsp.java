/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.1
 * Generated at: 2018-01-22 05:13:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import app.appui.BloodGroupBean;
import core.util.Constants;
import core.util.Util;
import app.util.AppConstants;
import app.appui.AppUtilBean;
import core.util.Util;
import app.menu.AppMenuBuilder;

public final class ManageBloodGroup_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(6);
    _jspx_dependants.put("/jsp/Footer.jsp", Long.valueOf(1516087679020L));
    _jspx_dependants.put("/jsp/js/validation.js", Long.valueOf(1516087679309L));
    _jspx_dependants.put("/jsp/Header.jsp", Long.valueOf(1516087679027L));
    _jspx_dependants.put("/jsp/Navigation.jsp", Long.valueOf(1516087679146L));
    _jspx_dependants.put("/jsp/js/common_utils.js", Long.valueOf(1516087679287L));
    _jspx_dependants.put("/jsp/LeaderBoard.jsp", Long.valueOf(1516087679033L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("core.util.Constants");
    _jspx_imports_classes.add("app.appui.AppUtilBean");
    _jspx_imports_classes.add("app.util.AppConstants");
    _jspx_imports_classes.add("core.util.Util");
    _jspx_imports_classes.add("app.menu.AppMenuBuilder");
    _jspx_imports_classes.add("app.appui.BloodGroupBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"/jsp/Error.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n");
      out.write("\n");
      out.write("\n");
      app.appui.BloodGroupBean BloodGroupBean = null;
      synchronized (session) {
        BloodGroupBean = (app.appui.BloodGroupBean) _jspx_page_context.getAttribute("BloodGroupBean", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (BloodGroupBean == null){
          BloodGroupBean = new app.appui.BloodGroupBean();
          _jspx_page_context.setAttribute("BloodGroupBean", BloodGroupBean, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("BloodGroupBean"), request);
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("  <title>Manage BloodGroups</title>\n");
      out.write("  <meta http-equiv=\"content-type\"\n");
      out.write(" content=\"text/html; charset=ISO-8859-1\">\n");
      out.write("  <meta name=\"author\" content=\" Govind Thirumalai\">\n");
      out.write("<script>\n");
      out.write("//\n");
      out.write("// SUMMARY\n");
      out.write("//\n");
      out.write("// This is a set of JavaScript functions for validating input on \n");
      out.write("// an HTML form.  Functions are provided to validate:\n");
      out.write("//\n");
      out.write("//      - U.S. and international phone/fax numbers\n");
      out.write("//      - U.S. ZIP codes (5 or 9 digit postal codes)\n");
      out.write("//      - U.S. Postal Codes (2 letter abbreviations for names of states)\n");
      out.write("//      - U.S. Social Security Numbers (abbreviated as SSNs)\n");
      out.write("//      - email addresses\n");
      out.write("//      - dates (entry of year, month, and day and validity of combined date)\n");
      out.write("//      - credit card numbers\n");
      out.write("//\n");
      out.write("// Supporting utility functions validate that:\n");
      out.write("//\n");
      out.write("//      - characters are Letter, Digit, or LetterOrDigit\n");
      out.write("//      - strings are a Signed, Positive, Negative, Nonpositive, or\n");
      out.write("//        Nonnegative integer\n");
      out.write("//      - strings are a Float or a SignedFloat\n");
      out.write("//      - strings are Alphabetic, Alphanumeric, or Whitespace\n");
      out.write("//      - strings contain an integer within a specified range\n");
      out.write("//\n");
      out.write("// Functions are also provided to interactively check the\n");
      out.write("// above kinds of data and prompt the user if they have\n");
      out.write("// been entered incorrectly.\n");
      out.write("//\n");
      out.write("// Other utility functions are provided to:\n");
      out.write("//\n");
      out.write("//      - remove from a string characters which are/are not \n");
      out.write("//        in a \"bag\" of selected characters     \n");
      out.write("//      - reformat a string, adding delimiter characters\n");
      out.write("//      - strip whitespace/leading whitespace from a string\n");
      out.write("//      - reformat U.S. phone numbers, ZIP codes, and Social\n");
      out.write("//        Security numbers\n");
      out.write("//\n");
      out.write("//\n");
      out.write("// Many of the below functions take an optional parameter eok (for \"emptyOK\")\n");
      out.write("// which determines whether the empty string will return true or false.\n");
      out.write("// Default behavior is controlled by global variable defaultEmptyOK.\n");
      out.write("//\n");
      out.write("// BASIC DATA VALIDATION FUNCTIONS:\n");
      out.write("//\n");
      out.write("// isWhitespace (s)                    Check whether string s is empty or whitespace.\n");
      out.write("// isLetter (c)                        Check whether character c is an English letter \n");
      out.write("// isDigit (c)                         Check whether character c is a digit \n");
      out.write("// isLetterOrDigit (c)                 Check whether character c is a letter or digit.\n");
      out.write("// isInteger (s [,eok])                True if all characters in string s are numbers.\n");
      out.write("// isSignedInteger (s [,eok])          True if all characters in string s are numbers; leading + or - allowed.\n");
      out.write("// isPositiveInteger (s [,eok])        True if string s is an integer > 0.\n");
      out.write("// isNonnegativeInteger (s [,eok])     True if string s is an integer >= 0.\n");
      out.write("// isNegativeInteger (s [,eok])        True if s is an integer < 0.\n");
      out.write("// isNonpositiveInteger (s [,eok])     True if s is an integer <= 0.\n");
      out.write("// isFloat (s [,eok])                  True if string s is an unsigned floating point (real) number. (Integers also OK.)\n");
      out.write("// isSignedFloat (s [,eok])            True if string s is a floating point number; leading + or - allowed. (Integers also OK.)\n");
      out.write("// isAlphabetic (s [,eok])             True if string s is English letters \n");
      out.write("// isAlphanumeric (s [,eok])           True if string s is English letters and numbers only.\n");
      out.write("// \n");
      out.write("// isSSN (s [,eok])                    True if string s is a valid U.S. Social Security Number.\n");
      out.write("// isUSPhoneNumber (s [,eok])          True if string s is a valid U.S. Phone Number. \n");
      out.write("// isInternationalPhoneNumber (s [,eok]) True if string s is a valid international phone number.\n");
      out.write("// isZIPCode (s [,eok])                True if string s is a valid U.S. ZIP code.\n");
      out.write("// isStateCode (s [,eok])              True if string s is a valid U.S. Postal Code\n");
      out.write("// isEmail (s [,eok])                  True if string s is a valid email address.\n");
      out.write("// isYear (s [,eok])                   True if string s is a valid Year number.\n");
      out.write("// isIntegerInRange (s, a, b [,eok])   True if string s is an integer between a and b, inclusive.\n");
      out.write("// isMonth (s [,eok])                  True if string s is a valid month between 1 and 12.\n");
      out.write("// isDay (s [,eok])                    True if string s is a valid day between 1 and 31.\n");
      out.write("// daysInFebruary (year)               Returns number of days in February of that year.\n");
      out.write("// isDate (year, month, day)           True if string arguments form a valid date.\n");
      out.write("\n");
      out.write("\n");
      out.write("// FUNCTIONS TO REFORMAT DATA:\n");
      out.write("//\n");
      out.write("// stripCharsInBag (s, bag)            Removes all characters in string bag from string s.\n");
      out.write("// stripCharsNotInBag (s, bag)         Removes all characters NOT in string bag from string s.\n");
      out.write("// stripWhitespace (s)                 Removes all whitespace characters from s.\n");
      out.write("// stripInitialWhitespace (s)          Removes initial (leading) whitespace characters from s.\n");
      out.write("// reformat (TARGETSTRING, STRING,     Function for inserting formatting characters or\n");
      out.write("//   INTEGER, STRING, INTEGER ... )       delimiters into TARGETSTRING.                                       \n");
      out.write("// reformatZIPCode (ZIPString)         If 9 digits, inserts separator hyphen.\n");
      out.write("// reformatSSN (SSN)                   Reformats as 123-45-6789.\n");
      out.write("// reformatUSPhone (USPhone)           Reformats as (123) 456-789.\n");
      out.write("\n");
      out.write("\n");
      out.write("// FUNCTIONS TO PROMPT USER:\n");
      out.write("//\n");
      out.write("// prompt (s)                          Display prompt string s in status bar.\n");
      out.write("// promptEntry (s)                     Display data entry prompt string s in status bar.\n");
      out.write("// warnEmpty (theField, s)             Notify user that required field theField is empty.\n");
      out.write("// warnInvalid (theField, s)           Notify user that contents of field theField are invalid.\n");
      out.write("\n");
      out.write("\n");
      out.write("// FUNCTIONS TO INTERACTIVELY CHECK FIELD CONTENTS:\n");
      out.write("//\n");
      out.write("// checkString (theField, s [,eok])    Check that theField.value is not empty or all whitespace.\n");
      out.write("// checkStateCode (theField)           Check that theField.value is a valid U.S. state code.\n");
      out.write("// checkZIPCode (theField [,eok])      Check that theField.value is a valid ZIP code.\n");
      out.write("// checkUSPhone (theField [,eok])      Check that theField.value is a valid US Phone.\n");
      out.write("// checkInternationalPhone (theField [,eok])  Check that theField.value is a valid International Phone.\n");
      out.write("// checkEmail (theField [,eok])        Check that theField.value is a valid Email.\n");
      out.write("// checkSSN (theField [,eok])          Check that theField.value is a valid SSN.\n");
      out.write("// checkYear (theField [,eok])         Check that theField.value is a valid Year.\n");
      out.write("// checkMonth (theField [,eok])        Check that theField.value is a valid Month.\n");
      out.write("// checkDay (theField [,eok])          Check that theField.value is a valid Day.\n");
      out.write("// checkDate (yearField, monthField, dayField, labelString, OKtoOmitDay)\n");
      out.write("//                                     Check that field values form a valid date.\n");
      out.write("// getRadioButtonValue (radio)         Get checked value from radio button.\n");
      out.write("// checkCreditCard (radio, theField)   Validate credit card info.\n");
      out.write("\n");
      out.write("\n");
      out.write("// CREDIT CARD DATA VALIDATION FUNCTIONS\n");
      out.write("// \n");
      out.write("// isCreditCard (st)              True if credit card number passes the Luhn Mod-10 test.\n");
      out.write("// isVisa (cc)                    True if string cc is a valid VISA number.\n");
      out.write("// isMasterCard (cc)              True if string cc is a valid MasterCard number.\n");
      out.write("// isAmericanExpress (cc)         True if string cc is a valid American Express number.\n");
      out.write("// isDinersClub (cc)              True if string cc is a valid Diner's Club number.\n");
      out.write("// isCarteBlanche (cc)            True if string cc is a valid Carte Blanche number.\n");
      out.write("// isDiscover (cc)                True if string cc is a valid Discover card number.\n");
      out.write("// isEnRoute (cc)                 True if string cc is a valid enRoute card number.\n");
      out.write("// isJCB (cc)                     True if string cc is a valid JCB card number.\n");
      out.write("// isAnyCard (cc)                 True if string cc is a valid card number for any of the accepted types.\n");
      out.write("// isCardMatch (Type, Number)     True if Number is valid for credic card of type Type.\n");
      out.write("//\n");
      out.write("// Other stub functions are retained for backward compatibility with LivePayment code.\n");
      out.write("// See comments below for details.\n");
      out.write("//\n");
      out.write("// Performance hint: when you deploy this file on your website, strip out the\n");
      out.write("// comment lines from the source code as well as any of the functions which\n");
      out.write("// you don't need.  This will give you a smaller .js file and achieve faster\n");
      out.write("// downloads.\n");
      out.write("//\n");
      out.write("// 18 Feb 97 created Eric Krock\n");
      out.write("// Original JavaScript 1.0-only version (works on Nav2.x and higher)\n");
      out.write("// available at http://developer.netscape.com/library/examples/javascript/formval/overview.html\n");
      out.write("// \n");
      out.write("// 4 Nov 97 rewritten to demonstrate use of JavaScript 1.2 regular expressions.\n");
      out.write("// (code is simpler and shorter but works on Nav4.x and higher only)\n");
      out.write("//\n");
      out.write("// (c) 1997 Netscape Communications Corporation\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// REGULAR EXPRESSION DECLARATIONS\n");
      out.write("// Notes which apply to all the regexps below:\n");
      out.write("// (1) We want to only match strings exactly. In other words,\n");
      out.write("//     we only want to return true if the string being tested\n");
      out.write("//     matches the regular expression with no leading or trailing\n");
      out.write("//     unmatched characters. So, we begin each regexp with\n");
      out.write("//     the special character ^ (which matches beginning of input)\n");
      out.write("//     and end each regexp with the special character $ (which\n");
      out.write("//     matches end of input).\n");
      out.write("// (2) In the below comments we use these abbreviations:\n");
      out.write("//     BOI = Beginning Of Input\n");
      out.write("//     EOI = End Of Input\n");
      out.write("// (3) For explanations of the regexp special characters such as\n");
      out.write("//     ^ $ \\s + [] \\d * ! ? \\ .\n");
      out.write("//     see http://developer.netscape.com/library/documentation/communicator/jsguide/regexp.htm\n");
      out.write("\n");
      out.write("\n");
      out.write("// BOI, followed by one or more whitespace characters, followed by EOI.\n");
      out.write("var reWhitespace = /^\\s+$/\n");
      out.write("\n");
      out.write("\n");
      out.write("// BOI, followed by one lower or uppercase English letter, followed by EOI.\n");
      out.write("var reLetter = /^[a-zA-Z]$/\n");
      out.write("var reUpperCaseLetter = /^[A-Z]$/\n");
      out.write("\n");
      out.write("\n");
      out.write("// BOI, followed by one or more lower or uppercase English letters, \n");
      out.write("// followed by EOI.\n");
      out.write("var reAlphabetic = /^[a-zA-Z]+$/\n");
      out.write("\n");
      out.write("\n");
      out.write("// BOI, followed by one or more lower or uppercase English letters\n");
      out.write("// or digits, followed by EOI.\n");
      out.write("var reAlphanumeric = /^[a-zA-Z0-9]+$/\n");
      out.write("\n");
      out.write("\n");
      out.write("// BOI, followed by one digit, followed by EOI.\n");
      out.write("var reDigit = /^\\d/\n");
      out.write("\n");
      out.write("\n");
      out.write("// BOI, followed by one lower or uppercase English letter\n");
      out.write("// or digit, followed by EOI.\n");
      out.write("var reLetterOrDigit = /^([a-zA-Z]|\\d)$/\n");
      out.write("\n");
      out.write("\n");
      out.write("// BOI, followed by one or more digits, followed by EOI.\n");
      out.write("var reInteger = /^\\d+$/\n");
      out.write("\n");
      out.write("\n");
      out.write("// BOI, followed by an optional + or -, followed by one or more digits, \n");
      out.write("// followed by EOI.\n");
      out.write("var reSignedInteger = '/^(+|-)?\\d+$/'\n");
      out.write("\n");
      out.write("\n");
      out.write("// BOI, followed by one of these two patterns:\n");
      out.write("// (a) one or more digits, followed by ., followed by zero or more digits\n");
      out.write("// (b) zero or more digits, followed by ., followed by one or more digits\n");
      out.write("// ... followed by EOI.\n");
      out.write("var reFloat = '/^((\\d+(\\.\\d*)?)|((\\d*\\.)?\\d+))$/'\n");
      out.write("\n");
      out.write("\n");
      out.write("// BOI, followed by an optional + or -, followed by one of these two patterns:\n");
      out.write("// (a) one or more digits, followed by ., followed by zero or more digits\n");
      out.write("// (b) zero or more digits, followed by ., followed by one or more digits\n");
      out.write("// ... followed by EOI.\n");
      out.write("var reSignedFloat = '/^(((+|-)?\\d+(\\.\\d*)?)|((+|-)?(\\d*\\.)?\\d+))$/'\n");
      out.write("\n");
      out.write("// BOI, followed by one or more characters, followed by @,\n");
      out.write("// followed by one or more characters, followed by ., \n");
      out.write("// followed by one or more characters, followed by EOI.\n");
      out.write("var reEmail = /^.+\\@.+\\..+$/\n");
      out.write("\n");
      out.write("// VARIABLE DECLARATIONS\n");
      out.write("\n");
      out.write("var digits = \"0123456789\";\n");
      out.write("\n");
      out.write("var lowercaseLetters = \"abcdefghijklmnopqrstuvwxyz\"\n");
      out.write("\n");
      out.write("var uppercaseLetters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n");
      out.write("\n");
      out.write("// whitespace characters as defined by this sample code\n");
      out.write("var whitespace = \" \\t\\n\\r\";\n");
      out.write("\n");
      out.write("\n");
      out.write("// non-digit characters which are allowed in phone numbers\n");
      out.write("var phoneNumberDelimiters = \"()- \";\n");
      out.write("\n");
      out.write("\n");
      out.write("// characters which are allowed in US phone numbers\n");
      out.write("var validUSPhoneChars = digits + phoneNumberDelimiters;\n");
      out.write("\n");
      out.write("\n");
      out.write("// characters which are allowed in international phone numbers\n");
      out.write("// (a leading + is OK)\n");
      out.write("var validWorldPhoneChars = digits + phoneNumberDelimiters + \"+\";\n");
      out.write("\n");
      out.write("\n");
      out.write("// non-digit characters which are allowed in \n");
      out.write("// Social Security Numbers\n");
      out.write("var SSNDelimiters = \"- \";\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// characters which are allowed in Social Security Numbers\n");
      out.write("var validSSNChars = digits + SSNDelimiters;\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// U.S. Social Security Numbers have 9 digits.\n");
      out.write("// They are formatted as 123-45-6789.\n");
      out.write("var digitsInSocialSecurityNumber = 9;\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// U.S. phone numbers have 10 digits.\n");
      out.write("// They are formatted as 123 456 7890 or (123) 456-7890.\n");
      out.write("var digitsInUSPhoneNumber = 10;\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// non-digit characters which are allowed in ZIP Codes\n");
      out.write("var ZIPCodeDelimiters = \"-\";\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// our preferred delimiter for reformatting ZIP Codes\n");
      out.write("var ZIPCodeDelimeter = \"-\"\n");
      out.write("\n");
      out.write("\n");
      out.write("// characters which are allowed in Social Security Numbers\n");
      out.write("var validZIPCodeChars = digits + ZIPCodeDelimiters\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// U.S. ZIP codes have 5 or 9 digits.\n");
      out.write("// They are formatted as 12345 or 12345-6789.\n");
      out.write("var digitsInZIPCode1 = 5\n");
      out.write("var digitsInZIPCode2 = 9\n");
      out.write("\n");
      out.write("// non-digit characters which are allowed in credit card numbers\n");
      out.write("var creditCardDelimiters = \" \"\n");
      out.write("\n");
      out.write("\n");
      out.write("// CONSTANT STRING DECLARATIONS\n");
      out.write("// (grouped for ease of translation and localization)\n");
      out.write("\n");
      out.write("// m is an abbreviation for \"missing\"\n");
      out.write("\n");
      out.write("var mPrefix = \"You did not enter a value into the \"\n");
      out.write("var mSuffix = \" field. This is a required field. Please enter it now.\"\n");
      out.write("\n");
      out.write("// s is an abbreviation for \"string\"\n");
      out.write("\n");
      out.write("var sUSLastName = \"Last Name\"\n");
      out.write("var sUSFirstName = \"First Name\"\n");
      out.write("var sWorldLastName = \"Family Name\"\n");
      out.write("var sWorldFirstName = \"Given Name\"\n");
      out.write("var sTitle = \"Title\"\n");
      out.write("var sCompanyName = \"Company Name\"\n");
      out.write("var sUSAddress = \"Street Address\"\n");
      out.write("var sWorldAddress = \"Address\"\n");
      out.write("var sCity = \"City\"\n");
      out.write("var sStateCode = \"State Code\"\n");
      out.write("var sWorldState = \"State, Province, or Prefecture\"\n");
      out.write("var sCountry = \"Country\"\n");
      out.write("var sZIPCode = \"ZIP Code\"\n");
      out.write("var sWorldPostalCode = \"Postal Code\"\n");
      out.write("var sPhone = \"Phone Number\"\n");
      out.write("var sFax = \"Fax Number\"\n");
      out.write("var sDateOfBirth = \"Date of Birth\"\n");
      out.write("var sExpirationDate = \"Expiration Date\"\n");
      out.write("var sEmail = \"Email\"\n");
      out.write("var sSSN = \"Social Security Number\"\n");
      out.write("var sCreditCardNumber = \"Credit Card Number\"\n");
      out.write("var sOtherInfo = \"Other Information\"\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// i is an abbreviation for \"invalid\"\n");
      out.write("\n");
      out.write("var iStateCode = \"This field must be a valid two character U.S. state abbreviation (like CA for California). Please reenter it now.\"\n");
      out.write("var iZIPCode = \"This field must be a 5 or 9 digit U.S. ZIP Code (like 94043). Please reenter it now.\"\n");
      out.write("var iUSPhone = \"This field must be a 10 digit U.S. phone number (like 415 555 1212). Please reenter it now.\"\n");
      out.write("var iWorldPhone = \"This field must be a valid international phone number. Please reenter it now.\"\n");
      out.write("var iSSN = \"This field must be a 9 digit U.S. social security number (like 123 45 6789). Please reenter it now.\"\n");
      out.write("var iEmail = \"This field must be a valid email address (like foo@bar.com). Please reenter it now.\"\n");
      out.write("var iCreditCardPrefix = \"This is not a valid \"\n");
      out.write("var iCreditCardSuffix = \" credit card number. (Click the link on this form to see a list of sample numbers.) Please reenter it now.\"\n");
      out.write("var iDay = \"This field must be a day number between 1 and 31.  Please reenter it now.\"\n");
      out.write("var iMonth = \"This field must be a month number between 1 and 12.  Please reenter it now.\"\n");
      out.write("var iYear = \"This field must be a 2 or 4 digit year number.  Please reenter it now.\"\n");
      out.write("var iDatePrefix = \"The Day, Month, and Year for \"\n");
      out.write("var iDateSuffix = \" do not form a valid date.  Please reenter them now.\"\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// p is an abbreviation for \"prompt\"\n");
      out.write("\n");
      out.write("var pEntryPrompt = \"Please enter a \"\n");
      out.write("var pStateCode = \"2 character code (like CA).\"\n");
      out.write("var pZIPCode = \"5 or 9 digit U.S. ZIP Code (like 94043).\"\n");
      out.write("var pUSPhone = \"10 digit U.S. phone number (like 415 555 1212).\"\n");
      out.write("var pWorldPhone = \"international phone number.\"\n");
      out.write("var pSSN = \"9 digit U.S. social security number (like 123 45 6789).\"\n");
      out.write("var pEmail = \"valid email address (like foo@bar.com).\"\n");
      out.write("var pCreditCard = \"valid credit card number.\"\n");
      out.write("var pDay = \"day number between 1 and 31.\"\n");
      out.write("var pMonth = \"month number between 1 and 12.\"\n");
      out.write("var pYear = \"2 or 4 digit year number.\"\n");
      out.write("\n");
      out.write("\n");
      out.write("// Global variable defaultEmptyOK defines default return value \n");
      out.write("// for many functions when they are passed the empty string. \n");
      out.write("// By default, they will return defaultEmptyOK.\n");
      out.write("//\n");
      out.write("// defaultEmptyOK is false, which means that by default, \n");
      out.write("// these functions will do \"strict\" validation.  Function\n");
      out.write("// isInteger, for example, will only return true if it is\n");
      out.write("// passed a string containing an integer; if it is passed\n");
      out.write("// the empty string, it will return false.\n");
      out.write("//\n");
      out.write("// You can change this default behavior globally (for all \n");
      out.write("// functions which use defaultEmptyOK) by changing the value\n");
      out.write("// of defaultEmptyOK.\n");
      out.write("//\n");
      out.write("// Most of these functions have an optional argument emptyOK\n");
      out.write("// which allows you to override the default behavior for \n");
      out.write("// the duration of a function call.\n");
      out.write("//\n");
      out.write("// This functionality is useful because it is possible to\n");
      out.write("// say \"if the user puts anything in this field, it must\n");
      out.write("// be an integer (or a phone number, or a string, etc.), \n");
      out.write("// but it's OK to leave the field empty too.\"\n");
      out.write("// This is the case for fields which are optional but which\n");
      out.write("// must have a certain kind of content if filled in.\n");
      out.write("\n");
      out.write("var defaultEmptyOK = false\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Attempting to make this library run on Navigator 2.0,\n");
      out.write("// so I'm supplying this array creation routine as per\n");
      out.write("// JavaScript 1.0 documentation.  If you're using \n");
      out.write("// Navigator 3.0 or later, you don't need to do this;\n");
      out.write("// you can use the Array constructor instead.\n");
      out.write("\n");
      out.write("function makeArray(n) {\n");
      out.write("//*** BUG: If I put this line in, I get two error messages:\n");
      out.write("//(1) Window.length can't be set by assignment\n");
      out.write("//(2) daysInMonth has no property indexed by 4\n");
      out.write("//If I leave it out, the code works fine.\n");
      out.write("//   this.length = n;\n");
      out.write("   for (var i = 1; i <= n; i++) {\n");
      out.write("      this[i] = 0\n");
      out.write("   } \n");
      out.write("   return this\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("var daysInMonth = makeArray(12);\n");
      out.write("daysInMonth[1] = 31;\n");
      out.write("daysInMonth[2] = 29;   // must programmatically check this\n");
      out.write("daysInMonth[3] = 31;\n");
      out.write("daysInMonth[4] = 30;\n");
      out.write("daysInMonth[5] = 31;\n");
      out.write("daysInMonth[6] = 30;\n");
      out.write("daysInMonth[7] = 31;\n");
      out.write("daysInMonth[8] = 31;\n");
      out.write("daysInMonth[9] = 30;\n");
      out.write("daysInMonth[10] = 31;\n");
      out.write("daysInMonth[11] = 30;\n");
      out.write("daysInMonth[12] = 31;\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Valid U.S. Postal Codes for states, territories, armed forces, etc.\n");
      out.write("// See http://www.usps.gov/ncsc/lookups/abbr_state.txt.\n");
      out.write("\n");
      out.write("var USStateCodeDelimiter = \"|\";\n");
      out.write("var USStateCodes = \"AL|AK|AS|AZ|AR|CA|CO|CT|DE|DC|FM|FL|GA|GU|HI|ID|IL|IN|IA|KS|KY|LA|ME|MH|MD|MA|MI|MN|MS|MO|MT|NE|NV|NH|NJ|NM|NY|NC|ND|MP|OH|OK|OR|PW|PA|PR|RI|SC|SD|TN|TX|UT|VT|VI|VA|WA|WV|WI|WY|AE|AA|AE|AE|AP\"\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Check whether string s is empty.\n");
      out.write("\n");
      out.write("function isEmpty(s)\n");
      out.write("{   return ((s == null) || (s.length == 0))\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Returns true if string s is empty or \n");
      out.write("// whitespace characters only.\n");
      out.write("\n");
      out.write("function isWhitespace (s)\n");
      out.write("\n");
      out.write("{   // Is s empty?\n");
      out.write("    return (isEmpty(s) || reWhitespace.test(s));\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Removes all characters which appear in regexp bag from string s.\n");
      out.write("// NOTES:\n");
      out.write("// 1) bag must be a regexp which matches single characters in isolation,\n");
      out.write("//    i.e. A or B or C or D or 1 or 2 ...\n");
      out.write("//    e.g. /\\d/g  or /[a-zA-Z]/g\n");
      out.write("// 2) make sure to append the 'g' modifier (for global search & replace)\n");
      out.write("//    at the end of the regexp\n");
      out.write("//    e.g. /\\d/g  or /[a-zA-Z]/g\n");
      out.write("\n");
      out.write("function stripCharsInRE (s, bag)\n");
      out.write("\n");
      out.write("{       return s.replace(bag, \"\")\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Removes all characters which appear in string bag from string s.\n");
      out.write("\n");
      out.write("function stripCharsInBag (s, bag)\n");
      out.write("\n");
      out.write("{   var i;\n");
      out.write("    var returnString = \"\";\n");
      out.write("\n");
      out.write("    // Search through string's characters one by one.\n");
      out.write("    // If character is not in bag, append to returnString.\n");
      out.write("\n");
      out.write("    for (i = 0; i < s.length; i++)\n");
      out.write("    {   \n");
      out.write("        // Check that current character isn't whitespace.\n");
      out.write("        var c = s.charAt(i);\n");
      out.write("        if (bag.indexOf(c) == -1) returnString += c;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    return returnString;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Removes all characters which do NOT appear in string bag \n");
      out.write("// from string s.\n");
      out.write("\n");
      out.write("function stripCharsNotInBag (s, bag)\n");
      out.write("\n");
      out.write("{   var i;\n");
      out.write("    var returnString = \"\";\n");
      out.write("\n");
      out.write("    // Search through string's characters one by one.\n");
      out.write("    // If character is in bag, append to returnString.\n");
      out.write("\n");
      out.write("    for (i = 0; i < s.length; i++)\n");
      out.write("    {   \n");
      out.write("        // Check that current character isn't whitespace.\n");
      out.write("        var c = s.charAt(i);\n");
      out.write("        if (bag.indexOf(c) != -1) returnString += c;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    return returnString;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Removes all whitespace characters from s.\n");
      out.write("// Global variable whitespace (see above)\n");
      out.write("// defines which characters are considered whitespace.\n");
      out.write("\n");
      out.write("function stripWhitespace (s)\n");
      out.write("\n");
      out.write("{   return stripCharsInBag (s, whitespace)\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// WORKAROUND FUNCTION FOR NAVIGATOR 2.0.2 COMPATIBILITY.\n");
      out.write("//\n");
      out.write("// The below function *should* be unnecessary.  In general,\n");
      out.write("// avoid using it.  Use the standard method indexOf instead.\n");
      out.write("//\n");
      out.write("// However, because of an apparent bug in indexOf on \n");
      out.write("// Navigator 2.0.2, the below loop does not work as the\n");
      out.write("// body of stripInitialWhitespace:\n");
      out.write("//\n");
      out.write("// while ((i < s.length) && (whitespace.indexOf(s.charAt(i)) != -1))\n");
      out.write("//   i++;\n");
      out.write("//\n");
      out.write("// ... so we provide this workaround function charInString\n");
      out.write("// instead.\n");
      out.write("//\n");
      out.write("// charInString (CHARACTER c, STRING s)\n");
      out.write("//\n");
      out.write("// Returns true if single character c (actually a string)\n");
      out.write("// is contained within string s.\n");
      out.write("\n");
      out.write("function charInString (c, s)\n");
      out.write("{   for (i = 0; i < s.length; i++)\n");
      out.write("    {   if (s.charAt(i) == c) return true;\n");
      out.write("    }\n");
      out.write("    return false\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Removes initial (leading) whitespace characters from s.\n");
      out.write("// Global variable whitespace (see above)\n");
      out.write("// defines which characters are considered whitespace.\n");
      out.write("\n");
      out.write("function stripInitialWhitespace (s)\n");
      out.write("\n");
      out.write("{   var i = 0;\n");
      out.write("\n");
      out.write("    while ((i < s.length) && charInString (s.charAt(i), whitespace))\n");
      out.write("       i++;\n");
      out.write("    \n");
      out.write("    return s.substring (i, s.length);\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Removes end (trailing) whitespace characters from s.\n");
      out.write("// Global variable whitespace (see above)\n");
      out.write("// defines which characters are considered whitespace.\n");
      out.write("\n");
      out.write("function stripEndWhitespace (s)\n");
      out.write("\n");
      out.write("{   var i = s.length - 1;\n");
      out.write("\n");
      out.write("    while (i >= 0) {\n");
      out.write("\t\tif ( ! charInString (s.charAt(i), whitespace)) { // If not a whitespace\n");
      out.write("\t\t\tbreak;\n");
      out.write("\t\t}\n");
      out.write("\t\ti--;\n");
      out.write("\t}\n");
      out.write("    \n");
      out.write("    return s.substring (0, i + 1);\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Returns true if character c is an English letter \n");
      out.write("// (A .. Z, a..z).\n");
      out.write("//\n");
      out.write("// NOTE: Need i18n version to support European characters.\n");
      out.write("// This could be tricky due to different character\n");
      out.write("// sets and orderings for various languages and platforms.\n");
      out.write("\n");
      out.write("function isLetter (c)\n");
      out.write("{   return reLetter.test(c)\n");
      out.write("}\n");
      out.write("\n");
      out.write("function isUpperCaseLetter (c)\n");
      out.write("{   return reUpperCaseLetter.test(c)\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Returns true if character c is a digit \n");
      out.write("// (0 .. 9).\n");
      out.write("\n");
      out.write("function isDigit (c)\n");
      out.write("{   return reDigit.test(c)\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Returns true if character c is a letter or digit.\n");
      out.write("\n");
      out.write("function isLetterOrDigit (c)\n");
      out.write("{   return reLetterOrDigit.test(c)\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isInteger (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// Returns true if all characters in string s are numbers.\n");
      out.write("//\n");
      out.write("// Accepts non-signed integers only. Does not accept floating \n");
      out.write("// point, exponential notation, etc.\n");
      out.write("//\n");
      out.write("// We don't use parseInt because that would accept a string\n");
      out.write("// with trailing non-numeric characters.\n");
      out.write("//\n");
      out.write("// By default, returns defaultEmptyOK if s is empty.\n");
      out.write("// There is an optional second argument called emptyOK.\n");
      out.write("// emptyOK is used to override for a single function call\n");
      out.write("//      the default behavior which is specified globally by\n");
      out.write("//      defaultEmptyOK.\n");
      out.write("// If emptyOK is false (or any value other than true), \n");
      out.write("//      the function will return false if s is empty.\n");
      out.write("// If emptyOK is true, the function will return true if s is empty.\n");
      out.write("//\n");
      out.write("// EXAMPLE FUNCTION CALL:     RESULT:\n");
      out.write("// isInteger (\"5\")            true \n");
      out.write("// isInteger (\"\")             defaultEmptyOK\n");
      out.write("// isInteger (\"-5\")           false\n");
      out.write("// isInteger (\"\", true)       true\n");
      out.write("// isInteger (\"\", false)      false\n");
      out.write("// isInteger (\"5\", false)     true\n");
      out.write("\n");
      out.write("function isInteger (s)\n");
      out.write("\n");
      out.write("{   var i;\n");
      out.write("\n");
      out.write("    if (isEmpty(s)) \n");
      out.write("       if (isInteger.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("       else return (isInteger.arguments[1] == true);\n");
      out.write("\n");
      out.write("    return reInteger.test(s)\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isSignedInteger (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// Returns true if all characters are numbers; \n");
      out.write("// first character is allowed to be + or - as well.\n");
      out.write("//\n");
      out.write("// Does not accept floating point, exponential notation, etc.\n");
      out.write("//\n");
      out.write("// We don't use parseInt because that would accept a string\n");
      out.write("// with trailing non-numeric characters.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("//\n");
      out.write("// EXAMPLE FUNCTION CALL:          RESULT:\n");
      out.write("// isSignedInteger (\"5\")           true \n");
      out.write("// isSignedInteger (\"\")            defaultEmptyOK\n");
      out.write("// isSignedInteger (\"-5\")          true\n");
      out.write("// isSignedInteger (\"+5\")          true\n");
      out.write("// isSignedInteger (\"\", false)     false\n");
      out.write("// isSignedInteger (\"\", true)      true\n");
      out.write("\n");
      out.write("function isSignedInteger (s)\n");
      out.write("\n");
      out.write("{   if (isEmpty(s)) \n");
      out.write("       if (isSignedInteger.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("       else return (isSignedInteger.arguments[1] == true);\n");
      out.write("\n");
      out.write("    \n");
      out.write("    else {\n");
      out.write("       return reSignedInteger.test(s)\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isPositiveInteger (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// Returns true if string s is an integer > 0.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function isPositiveInteger (s)\n");
      out.write("{   var secondArg = defaultEmptyOK;\n");
      out.write("\n");
      out.write("    if (isPositiveInteger.arguments.length > 1)\n");
      out.write("        secondArg = isPositiveInteger.arguments[1];\n");
      out.write("\n");
      out.write("    // The next line is a bit byzantine.  What it means is:\n");
      out.write("    // a) s must be a signed integer, AND\n");
      out.write("    // b) one of the following must be true:\n");
      out.write("    //    i)  s is empty and we are supposed to return true for\n");
      out.write("    //        empty strings\n");
      out.write("    //    ii) this is a positive, not negative, number\n");
      out.write("\n");
      out.write("    return (isSignedInteger(s, secondArg)\n");
      out.write("\t    && ( (isEmpty(s) && secondArg)  || (parseInt (s, 10) > 0) ) );\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isNonnegativeInteger (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// Returns true if string s is an integer >= 0.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function isNonnegativeInteger (s)\n");
      out.write("{   var secondArg = defaultEmptyOK;\n");
      out.write("\n");
      out.write("    if (isNonnegativeInteger.arguments.length > 1)\n");
      out.write("        secondArg = isNonnegativeInteger.arguments[1];\n");
      out.write("\n");
      out.write("    // The next line is a bit byzantine.  What it means is:\n");
      out.write("    // a) s must be a signed integer, AND\n");
      out.write("    // b) one of the following must be true:\n");
      out.write("    //    i)  s is empty and we are supposed to return true for\n");
      out.write("    //        empty strings\n");
      out.write("    //    ii) this is a number >= 0\n");
      out.write("\n");
      out.write("    return (isSignedInteger(s, secondArg)\n");
      out.write("\t    && ( (isEmpty(s) && secondArg)  || (parseInt (s, 10) >= 0) ) );\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isNegativeInteger (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// Returns true if string s is an integer < 0.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function isNegativeInteger (s)\n");
      out.write("{   var secondArg = defaultEmptyOK;\n");
      out.write("\n");
      out.write("    if (isNegativeInteger.arguments.length > 1)\n");
      out.write("        secondArg = isNegativeInteger.arguments[1];\n");
      out.write("\n");
      out.write("    // The next line is a bit byzantine.  What it means is:\n");
      out.write("    // a) s must be a signed integer, AND\n");
      out.write("    // b) one of the following must be true:\n");
      out.write("    //    i)  s is empty and we are supposed to return true for\n");
      out.write("    //        empty strings\n");
      out.write("    //    ii) this is a negative, not positive, number\n");
      out.write("\n");
      out.write("    return (isSignedInteger(s, secondArg)\n");
      out.write("\t    && ( (isEmpty(s) && secondArg)  || (parseInt (s, 10) < 0) ) );\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isNonpositiveInteger (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// Returns true if string s is an integer <= 0.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function isNonpositiveInteger (s)\n");
      out.write("{   var secondArg = defaultEmptyOK;\n");
      out.write("\n");
      out.write("    if (isNonpositiveInteger.arguments.length > 1)\n");
      out.write("        secondArg = isNonpositiveInteger.arguments[1];\n");
      out.write("\n");
      out.write("    // The next line is a bit byzantine.  What it means is:\n");
      out.write("    // a) s must be a signed integer, AND\n");
      out.write("    // b) one of the following must be true:\n");
      out.write("    //    i)  s is empty and we are supposed to return true for\n");
      out.write("    //        empty strings\n");
      out.write("    //    ii) this is a number <= 0\n");
      out.write("\n");
      out.write("    return (isSignedInteger(s, secondArg)\n");
      out.write("\t    && ( (isEmpty(s) && secondArg)  || (parseInt (s, 10) <= 0) ) );\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isFloat (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// True if string s is an unsigned floating point (real) number. \n");
      out.write("//\n");
      out.write("// Also returns true for unsigned integers. If you wish\n");
      out.write("// to distinguish between integers and floating point numbers,\n");
      out.write("// first call isInteger, then call isFloat.\n");
      out.write("//\n");
      out.write("// Does not accept exponential notation.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function isFloat (s)\n");
      out.write("\n");
      out.write("{   if (isEmpty(s)) \n");
      out.write("       if (isFloat.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("       else return (isFloat.arguments[1] == true);\n");
      out.write("\n");
      out.write("    return reFloat.test(s)\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isSignedFloat (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// True if string s is a signed or unsigned floating point \n");
      out.write("// (real) number. First character is allowed to be + or -.\n");
      out.write("//\n");
      out.write("// Also returns true for unsigned integers. If you wish\n");
      out.write("// to distinguish between integers and floating point numbers,\n");
      out.write("// first call isSignedInteger, then call isSignedFloat.\n");
      out.write("//\n");
      out.write("// Does not accept exponential notation.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function isSignedFloat (s)\n");
      out.write("\n");
      out.write("{   if (isEmpty(s)) \n");
      out.write("       if (isSignedFloat.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("       else return (isSignedFloat.arguments[1] == true);\n");
      out.write("\n");
      out.write("    else {\n");
      out.write("       return reSignedFloat.test(s)\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isAlphabetic (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// Returns true if string s is English letters \n");
      out.write("// (A .. Z, a..z) only.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("//\n");
      out.write("// NOTE: Need i18n version to support European characters.\n");
      out.write("// This could be tricky due to different character\n");
      out.write("// sets and orderings for various languages and platforms.\n");
      out.write("\n");
      out.write("function isAlphabetic (s)\n");
      out.write("\n");
      out.write("{   var i;\n");
      out.write("\n");
      out.write("    if (isEmpty(s)) \n");
      out.write("       if (isAlphabetic.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("       else return (isAlphabetic.arguments[1] == true);\n");
      out.write("\n");
      out.write("    else {\n");
      out.write("       return reAlphabetic.test(s)\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isAlphanumeric (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// Returns true if string s is English letters \n");
      out.write("// (A .. Z, a..z) and numbers only.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("//\n");
      out.write("// NOTE: Need i18n version to support European characters.\n");
      out.write("// This could be tricky due to different character\n");
      out.write("// sets and orderings for various languages and platforms.\n");
      out.write("\n");
      out.write("function isAlphanumeric (s)\n");
      out.write("\n");
      out.write("{   var i;\n");
      out.write("\n");
      out.write("    if (isEmpty(s)) \n");
      out.write("       if (isAlphanumeric.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("       else return (isAlphanumeric.arguments[1] == true);\n");
      out.write("\n");
      out.write("    else {\n");
      out.write("       return reAlphanumeric.test(s)\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// reformat (TARGETSTRING, STRING, INTEGER, STRING, INTEGER ... )       \n");
      out.write("//\n");
      out.write("// Handy function for arbitrarily inserting formatting characters\n");
      out.write("// or delimiters of various kinds within TARGETSTRING.\n");
      out.write("//\n");
      out.write("// reformat takes one named argument, a string s, and any number\n");
      out.write("// of other arguments.  The other arguments must be integers or\n");
      out.write("// strings.  These other arguments specify how string s is to be\n");
      out.write("// reformatted and how and where other strings are to be inserted\n");
      out.write("// into it.\n");
      out.write("//\n");
      out.write("// reformat processes the other arguments in order one by one.\n");
      out.write("// * If the argument is an integer, reformat appends that number \n");
      out.write("//   of sequential characters from s to the resultString.\n");
      out.write("// * If the argument is a string, reformat appends the string\n");
      out.write("//   to the resultString.\n");
      out.write("//\n");
      out.write("// NOTE: The first argument after TARGETSTRING must be a string.\n");
      out.write("// (It can be empty.)  The second argument must be an integer.\n");
      out.write("// Thereafter, integers and strings must alternate.  This is to\n");
      out.write("// provide backward compatibility to Navigator 2.0.2 JavaScript\n");
      out.write("// by avoiding use of the typeof operator.\n");
      out.write("//\n");
      out.write("// It is the caller's responsibility to make sure that we do not\n");
      out.write("// try to copy more characters from s than s.length.\n");
      out.write("//\n");
      out.write("// EXAMPLES:\n");
      out.write("//\n");
      out.write("// * To reformat a 10-digit U.S. phone number from \"1234567890\"\n");
      out.write("//   to \"(123) 456-7890\" make this function call:\n");
      out.write("//   reformat(\"1234567890\", \"(\", 3, \") \", 3, \"-\", 4)\n");
      out.write("//\n");
      out.write("// * To reformat a 9-digit U.S. Social Security number from\n");
      out.write("//   \"123456789\" to \"123-45-6789\" make this function call:\n");
      out.write("//   reformat(\"123456789\", \"\", 3, \"-\", 2, \"-\", 4)\n");
      out.write("//\n");
      out.write("// HINT:\n");
      out.write("//\n");
      out.write("// If you have a string which is already delimited in one way\n");
      out.write("// (example: a phone number delimited with spaces as \"123 456 7890\")\n");
      out.write("// and you want to delimit it in another way using function reformat,\n");
      out.write("// call function stripCharsNotInBag to remove the unwanted \n");
      out.write("// characters, THEN call function reformat to delimit as desired.\n");
      out.write("//\n");
      out.write("// EXAMPLE:\n");
      out.write("//\n");
      out.write("// reformat (stripCharsNotInBag (\"123 456 7890\", digits),\n");
      out.write("//           \"(\", 3, \") \", 3, \"-\", 4)\n");
      out.write("\n");
      out.write("function reformat (s)\n");
      out.write("\n");
      out.write("{   var arg;\n");
      out.write("    var sPos = 0;\n");
      out.write("    var resultString = \"\";\n");
      out.write("\n");
      out.write("    for (var i = 1; i < reformat.arguments.length; i++) {\n");
      out.write("       arg = reformat.arguments[i];\n");
      out.write("       if (i % 2 == 1) resultString += arg;\n");
      out.write("       else {\n");
      out.write("           resultString += s.substring(sPos, sPos + arg);\n");
      out.write("           sPos += arg;\n");
      out.write("       }\n");
      out.write("    }\n");
      out.write("    return resultString;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isSSN (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// isSSN returns true if string s is a valid U.S. Social\n");
      out.write("// Security Number.  Must be 9 digits.\n");
      out.write("//\n");
      out.write("// NOTE: Strip out any delimiters (spaces, hyphens, etc.)\n");
      out.write("// from string s before calling this function.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function isSSN (s)\n");
      out.write("{   if (isEmpty(s)) \n");
      out.write("       if (isSSN.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("       else return (isSSN.arguments[1] == true);\n");
      out.write("    return (isInteger(s) && s.length == digitsInSocialSecurityNumber)\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isUSPhoneNumber (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// isUSPhoneNumber returns true if string s is a valid U.S. Phone\n");
      out.write("// Number.  Must be 10 digits.\n");
      out.write("//\n");
      out.write("// NOTE: Strip out any delimiters (spaces, hyphens, parentheses, etc.)\n");
      out.write("// from string s before calling this function.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function isUSPhoneNumber (s)\n");
      out.write("{   if (isEmpty(s)) \n");
      out.write("       if (isUSPhoneNumber.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("       else return (isUSPhoneNumber.arguments[1] == true);\n");
      out.write("    return (isInteger(s) && s.length == digitsInUSPhoneNumber)\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isInternationalPhoneNumber (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// isInternationalPhoneNumber returns true if string s is a valid \n");
      out.write("// international phone number.  Must be digits only; any length OK.\n");
      out.write("// May be prefixed by + character.\n");
      out.write("//\n");
      out.write("// NOTE: A phone number of all zeros would not be accepted.\n");
      out.write("// I don't think that is a valid phone number anyway.\n");
      out.write("//\n");
      out.write("// NOTE: Strip out any delimiters (spaces, hyphens, parentheses, etc.)\n");
      out.write("// from string s before calling this function.  You may leave in \n");
      out.write("// leading + character if you wish.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function isInternationalPhoneNumber (s)\n");
      out.write("{   if (isEmpty(s)) \n");
      out.write("       if (isInternationalPhoneNumber.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("       else return (isInternationalPhoneNumber.arguments[1] == true);\n");
      out.write("    return (isPositiveInteger(s))\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isZIPCode (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// isZIPCode returns true if string s is a valid \n");
      out.write("// U.S. ZIP code.  Must be 5 or 9 digits only.\n");
      out.write("//\n");
      out.write("// NOTE: Strip out any delimiters (spaces, hyphens, etc.)\n");
      out.write("// from string s before calling this function.  \n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function isZIPCode (s)\n");
      out.write("{  if (isEmpty(s)) \n");
      out.write("       if (isZIPCode.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("       else return (isZIPCode.arguments[1] == true);\n");
      out.write("   return (isInteger(s) && \n");
      out.write("            ((s.length == digitsInZIPCode1) ||\n");
      out.write("             (s.length == digitsInZIPCode2)))\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isStateCode (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// Return true if s is a valid U.S. Postal Code \n");
      out.write("// (abbreviation for state).\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function isStateCode(s)\n");
      out.write("{   if (isEmpty(s)) \n");
      out.write("       if (isStateCode.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("       else return (isStateCode.arguments[1] == true);\n");
      out.write("    return ( (USStateCodes.indexOf(s) != -1) &&\n");
      out.write("             (s.indexOf(USStateCodeDelimiter) == -1) )\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isEmail (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// Email address must be of form a@b.c -- in other words:\n");
      out.write("// * there must be at least one character before the @\n");
      out.write("// * there must be at least one character before and after the .\n");
      out.write("// * the characters @ and . are both required\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function isEmail (s)\n");
      out.write("\n");
      out.write("{   if (isEmpty(s)) \n");
      out.write("       if (isEmail.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("       else return (isEmail.arguments[1] == true);\n");
      out.write("    \n");
      out.write("    else {\n");
      out.write("       return reEmail.test(s)\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isYear (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// isYear returns true if string s is a valid \n");
      out.write("// Year number.  Must be 2 or 4 digits only.\n");
      out.write("// \n");
      out.write("// For Year 2000 compliance, you are advised\n");
      out.write("// to use 4-digit year numbers everywhere.\n");
      out.write("//\n");
      out.write("// And yes, this function is not Year 10000 compliant, but \n");
      out.write("// because I am giving you 8003 years of advance notice,\n");
      out.write("// I don't feel very guilty about this ...\n");
      out.write("//\n");
      out.write("// For B.C. compliance, write your own function. ;->\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function isYear (s)\n");
      out.write("{   \n");
      out.write("  if (isEmpty(s)) \n");
      out.write("    if (isYear.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("    else return (isYear.arguments[1] == true);\n");
      out.write("  //if (!isNonnegativeInteger(s)) return false;\n");
      out.write("    if (!isInteger(s)) return false;\n");
      out.write("    return ((s.length == 2) || (s.length == 4));\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isIntegerInRange (STRING s, INTEGER a, INTEGER b [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// isIntegerInRange returns true if string s is an integer \n");
      out.write("// within the range of integer arguments a and b, inclusive.\n");
      out.write("// \n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("\n");
      out.write("function isIntegerInRange (s, a, b)\n");
      out.write("{   if (isEmpty(s)) \n");
      out.write("       if (isIntegerInRange.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("       else return (isIntegerInRange.arguments[1] == true);\n");
      out.write("\n");
      out.write("    // Catch non-integer strings to avoid creating a NaN below,\n");
      out.write("    // which isn't available on JavaScript 1.0 for Windows.\n");
      out.write("    if (!isInteger(s, false)) return false;\n");
      out.write("\n");
      out.write("    // Now, explicitly change the type to integer via parseInt\n");
      out.write("    // so that the comparison code below will work both on \n");
      out.write("    // JavaScript 1.2 (which typechecks in equality comparisons)\n");
      out.write("    // and JavaScript 1.1 and before (which doesn't).\n");
      out.write("    var num = parseInt (s, 10);\n");
      out.write("    return ((num >= a) && (num <= b));\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isMonth (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// isMonth returns true if string s is a valid \n");
      out.write("// month number between 1 and 12.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function isMonth (s)\n");
      out.write("{   \n");
      out.write("  if (isEmpty(s)) \n");
      out.write("    if (isMonth.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("    else return (isMonth.arguments[1] == true);\n");
      out.write("  return isIntegerInRange (s, 1, 12);\n");
      out.write("}\n");
      out.write("\n");
      out.write("function isHour (s) \n");
      out.write("{\n");
      out.write("  if (isEmpty(s)) \n");
      out.write("    if (isHour.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("    else return (isHour.arguments[1] == true);\n");
      out.write("  return isIntegerInRange (s, 0, 23);\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("function isMinute (s) \n");
      out.write("{\n");
      out.write("  if (isEmpty(s)) \n");
      out.write("    if (isMinute.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("    else return (isMinute.arguments[1] == true);\n");
      out.write("  return isIntegerInRange (s, 0, 59);\n");
      out.write("}\n");
      out.write("\n");
      out.write("function isSecond (s) \n");
      out.write("{\n");
      out.write("  if (isEmpty(s)) \n");
      out.write("    if (isSecond.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("    else return (isSecond.arguments[1] == true);\n");
      out.write("  return isIntegerInRange (s, 0, 59);\n");
      out.write("}\n");
      out.write("\n");
      out.write("// isDay (STRING s [, BOOLEAN emptyOK])\n");
      out.write("// \n");
      out.write("// isDay returns true if string s is a valid \n");
      out.write("// day number between 1 and 31.\n");
      out.write("// \n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function isDay (s)\n");
      out.write("{   if (isEmpty(s)) \n");
      out.write("       if (isDay.arguments.length == 1) return defaultEmptyOK;\n");
      out.write("       else return (isDay.arguments[1] == true);   \n");
      out.write("    return isIntegerInRange (s, 1, 31);\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// daysInFebruary (INTEGER year)\n");
      out.write("// \n");
      out.write("// Given integer argument year,\n");
      out.write("// returns number of days in February of that year.\n");
      out.write("\n");
      out.write("function daysInFebruary (year)\n");
      out.write("{   // February has 29 days in any year evenly divisible by four,\n");
      out.write("    // EXCEPT for centurial years which are not also divisible by 400.\n");
      out.write("    return (  ((year % 4 == 0) && ( (!(year % 100 == 0)) || (year % 400 == 0) ) ) ? 29 : 28 );\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// isDate (STRING year, STRING month, STRING day)\n");
      out.write("//\n");
      out.write("// isDate returns true if string arguments year, month, and day \n");
      out.write("// form a valid date.\n");
      out.write("// \n");
      out.write("\n");
      out.write("function isDate (year, month, day)\n");
      out.write("{   // catch invalid years (not 2- or 4-digit) and invalid months and days.\n");
      out.write("    if (! (isYear(year, false) && isMonth(month, false) && isDay(day, false))) return false;\n");
      out.write("\n");
      out.write("    // Explicitly change type to integer to make code work in both\n");
      out.write("    // JavaScript 1.1 and JavaScript 1.2.\n");
      out.write("    var intYear = parseInt(year, 10);\n");
      out.write("    var intMonth = parseInt(month, 10);\n");
      out.write("    var intDay = parseInt(day, 10);\n");
      out.write("\n");
      out.write("    // catch invalid days, except for February\n");
      out.write("    if (intDay > daysInMonth[intMonth]) return false; \n");
      out.write("\n");
      out.write("    if ((intMonth == 2) && (intDay > daysInFebruary(intYear))) return false;\n");
      out.write("\n");
      out.write("    return true;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("/* FUNCTIONS TO NOTIFY USER OF INPUT REQUIREMENTS OR MISTAKES. */\n");
      out.write("\n");
      out.write("\n");
      out.write("// Display prompt string s in status bar.\n");
      out.write("\n");
      out.write("function prompt (s)\n");
      out.write("{   window.status = s\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Display data entry prompt string s in status bar.\n");
      out.write("\n");
      out.write("function promptEntry (s)\n");
      out.write("{   window.status = pEntryPrompt + s\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Notify user that required field theField is empty.\n");
      out.write("// String s describes expected contents of theField.value.\n");
      out.write("// Put focus in theField and return false.\n");
      out.write("\n");
      out.write("function warnEmpty (theField, s)\n");
      out.write("{   theField.focus()\n");
      out.write("    alert(mPrefix + s + mSuffix)\n");
      out.write("    return false\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Notify user that contents of field theField are invalid.\n");
      out.write("// String s describes expected contents of theField.value.\n");
      out.write("// Put select theField, pu focus in it, and return false.\n");
      out.write("\n");
      out.write("function warnInvalid (theField, s)\n");
      out.write("{   theField.focus()\n");
      out.write("    theField.select()\n");
      out.write("    alert(s)\n");
      out.write("    return false\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("/* FUNCTIONS TO INTERACTIVELY CHECK VARIOUS FIELDS. */\n");
      out.write("\n");
      out.write("// checkString (TEXTFIELD theField, STRING s, [, BOOLEAN emptyOK==false])\n");
      out.write("//\n");
      out.write("// Check that string theField.value is not all whitespace.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function checkString (theField, s, emptyOK)\n");
      out.write("{   // Next line is needed on NN3 to avoid \"undefined is not a number\" error\n");
      out.write("    // in equality comparison below.\n");
      out.write("    if (checkString.arguments.length == 2) emptyOK = defaultEmptyOK;\n");
      out.write("    if ((emptyOK == true) && (isEmpty(theField.value))) return true;\n");
      out.write("    if (isWhitespace(theField.value)) \n");
      out.write("       return warnEmpty (theField, s);\n");
      out.write("    else return true;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// checkStateCode (TEXTFIELD theField [, BOOLEAN emptyOK==false])\n");
      out.write("//\n");
      out.write("// Check that string theField.value is a valid U.S. state code.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function checkStateCode (theField, emptyOK)\n");
      out.write("{   if (checkStateCode.arguments.length == 1) emptyOK = defaultEmptyOK;\n");
      out.write("    if ((emptyOK == true) && (isEmpty(theField.value))) return true;\n");
      out.write("    else\n");
      out.write("    {  theField.value = theField.value.toUpperCase();\n");
      out.write("       if (!isStateCode(theField.value, false)) \n");
      out.write("          return warnInvalid (theField, iStateCode);\n");
      out.write("       else return true;\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// takes ZIPString, a string of 5 or 9 digits;\n");
      out.write("// if 9 digits, inserts separator hyphen\n");
      out.write("\n");
      out.write("function reformatZIPCode (ZIPString)\n");
      out.write("{   if (ZIPString.length == 5) return ZIPString;\n");
      out.write("    else return (reformat (ZIPString, \"\", 5, \"-\", 4));\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// checkZIPCode (TEXTFIELD theField [, BOOLEAN emptyOK==false])\n");
      out.write("//\n");
      out.write("// Check that string theField.value is a valid ZIP code.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function checkZIPCode (theField, emptyOK)\n");
      out.write("{   if (checkZIPCode.arguments.length == 1) emptyOK = defaultEmptyOK;\n");
      out.write("    if ((emptyOK == true) && (isEmpty(theField.value))) return true;\n");
      out.write("    else\n");
      out.write("    { var normalizedZIP = stripCharsInBag(theField.value, ZIPCodeDelimiters)\n");
      out.write("      if (!isZIPCode(normalizedZIP, false)) \n");
      out.write("         return warnInvalid (theField, iZIPCode);\n");
      out.write("      else \n");
      out.write("      {  // if you don't want to insert a hyphen, comment next line out\n");
      out.write("         theField.value = reformatZIPCode(normalizedZIP)\n");
      out.write("         return true;\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// takes USPhone, a string of 10 digits\n");
      out.write("// and reformats as (123) 456-789\n");
      out.write("\n");
      out.write("function reformatUSPhone (USPhone)\n");
      out.write("{   return (reformat (USPhone, \"(\", 3, \") \", 3, \"-\", 4))\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// checkUSPhone (TEXTFIELD theField [, BOOLEAN emptyOK==false])\n");
      out.write("//\n");
      out.write("// Check that string theField.value is a valid US Phone.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function checkUSPhone (theField, emptyOK)\n");
      out.write("{   if (checkUSPhone.arguments.length == 1) emptyOK = defaultEmptyOK;\n");
      out.write("    if ((emptyOK == true) && (isEmpty(theField.value))) return true;\n");
      out.write("    else\n");
      out.write("    {  var normalizedPhone = stripCharsInBag(theField.value, phoneNumberDelimiters)\n");
      out.write("       if (!isUSPhoneNumber(normalizedPhone, false)) \n");
      out.write("          return warnInvalid (theField, iUSPhone);\n");
      out.write("       else \n");
      out.write("       {  // if you don't want to reformat as (123) 456-789, comment next line out\n");
      out.write("          theField.value = reformatUSPhone(normalizedPhone)\n");
      out.write("          return true;\n");
      out.write("       }\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// checkInternationalPhone (TEXTFIELD theField [, BOOLEAN emptyOK==false])\n");
      out.write("//\n");
      out.write("// Check that string theField.value is a valid International Phone.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function checkInternationalPhone (theField, emptyOK)\n");
      out.write("{   if (checkInternationalPhone.arguments.length == 1) emptyOK = defaultEmptyOK;\n");
      out.write("    if ((emptyOK == true) && (isEmpty(theField.value))) return true;\n");
      out.write("    else\n");
      out.write("    {  if (!isInternationalPhoneNumber(theField.value, false)) \n");
      out.write("          return warnInvalid (theField, iWorldPhone);\n");
      out.write("       else return true;\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// checkEmail (TEXTFIELD theField [, BOOLEAN emptyOK==false])\n");
      out.write("//\n");
      out.write("// Check that string theField.value is a valid Email.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function checkEmail (theField, emptyOK)\n");
      out.write("{   if (checkEmail.arguments.length == 1) emptyOK = defaultEmptyOK;\n");
      out.write("    if ((emptyOK == true) && (isEmpty(theField.value))) return true;\n");
      out.write("    else if (!isEmail(theField.value, false)) \n");
      out.write("       return warnInvalid (theField, iEmail);\n");
      out.write("    else return true;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// takes SSN, a string of 9 digits\n");
      out.write("// and reformats as 123-45-6789\n");
      out.write("\n");
      out.write("function reformatSSN (SSN)\n");
      out.write("{   return (reformat (SSN, \"\", 3, \"-\", 2, \"-\", 4))\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("// Check that string theField.value is a valid SSN.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function checkSSN (theField, emptyOK)\n");
      out.write("{   if (checkSSN.arguments.length == 1) emptyOK = defaultEmptyOK;\n");
      out.write("    if ((emptyOK == true) && (isEmpty(theField.value))) return true;\n");
      out.write("    else\n");
      out.write("    {  var normalizedSSN = stripCharsInBag(theField.value, SSNDelimiters)\n");
      out.write("       if (!isSSN(normalizedSSN, false)) \n");
      out.write("          return warnInvalid (theField, iSSN);\n");
      out.write("       else \n");
      out.write("       {  // if you don't want to reformats as 123-456-7890, comment next line out\n");
      out.write("          theField.value = reformatSSN(normalizedSSN)\n");
      out.write("          return true;\n");
      out.write("       }\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Check that string theField.value is a valid Year.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function checkYear (theField, emptyOK)\n");
      out.write("{   if (checkYear.arguments.length == 1) emptyOK = defaultEmptyOK;\n");
      out.write("    if ((emptyOK == true) && (isEmpty(theField.value))) return true;\n");
      out.write("    if (!isYear(theField.value, false)) \n");
      out.write("       return warnInvalid (theField, iYear);\n");
      out.write("    else return true;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("// Check that string theField.value is a valid Month.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function checkMonth (theField, emptyOK)\n");
      out.write("{   if (checkMonth.arguments.length == 1) emptyOK = defaultEmptyOK;\n");
      out.write("    if ((emptyOK == true) && (isEmpty(theField.value))) return true;\n");
      out.write("    if (!isMonth(theField.value, false)) \n");
      out.write("       return warnInvalid (theField, iMonth);\n");
      out.write("    else return true;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("// Check that string theField.value is a valid Day.\n");
      out.write("//\n");
      out.write("// For explanation of optional argument emptyOK,\n");
      out.write("// see comments of function isInteger.\n");
      out.write("\n");
      out.write("function checkDay (theField, emptyOK)\n");
      out.write("{   if (checkDay.arguments.length == 1) emptyOK = defaultEmptyOK;\n");
      out.write("    if ((emptyOK == true) && (isEmpty(theField.value))) return true;\n");
      out.write("    if (!isDay(theField.value, false)) \n");
      out.write("       return warnInvalid (theField, iDay);\n");
      out.write("    else return true;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// checkDate (yearField, monthField, dayField, STRING labelString [, OKtoOmitDay==false])\n");
      out.write("//\n");
      out.write("// Check that yearField.value, monthField.value, and dayField.value \n");
      out.write("// form a valid date.\n");
      out.write("//\n");
      out.write("// If they don't, labelString (the name of the date, like \"Birth Date\")\n");
      out.write("// is displayed to tell the user which date field is invalid.\n");
      out.write("//\n");
      out.write("// If it is OK for the day field to be empty, set optional argument\n");
      out.write("// OKtoOmitDay to true.  It defaults to false.\n");
      out.write("\n");
      out.write("function checkDate (yearField, monthField, dayField, labelString, OKtoOmitDay)\n");
      out.write("{   // Next line is needed on NN3 to avoid \"undefined is not a number\" error\n");
      out.write("    // in equality comparison below.\n");
      out.write("    if (checkDate.arguments.length == 4) OKtoOmitDay = false;\n");
      out.write("    if (!isYear(yearField.value)) return warnInvalid (yearField, iYear);\n");
      out.write("    if (!isMonth(monthField.value)) return warnInvalid (monthField, iMonth);\n");
      out.write("    if ( (OKtoOmitDay == true) && isEmpty(dayField.value) ) return true;\n");
      out.write("    else if (!isDay(dayField.value)) \n");
      out.write("       return warnInvalid (dayField, iDay);\n");
      out.write("    if (isDate (yearField.value, monthField.value, dayField.value))\n");
      out.write("       return true;\n");
      out.write("    alert (iDatePrefix + labelString + iDateSuffix)\n");
      out.write("    return false\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Get checked value from radio button.\n");
      out.write("\n");
      out.write("function getRadioButtonValue (radio)\n");
      out.write("{   for (var i = 0; i < radio.length; i++)\n");
      out.write("    {   if (radio[i].checked) { break }\n");
      out.write("    }\n");
      out.write("    return radio[i].value\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Validate credit card info.\n");
      out.write("\n");
      out.write("function checkCreditCard (radio, theField)\n");
      out.write("{   var cardType = getRadioButtonValue (radio)\n");
      out.write("    var normalizedCCN = stripCharsInBag(theField.value, creditCardDelimiters)\n");
      out.write("    if (!isCardMatch(cardType, normalizedCCN)) \n");
      out.write("       return warnInvalid (theField, iCreditCardPrefix + cardType + iCreditCardSuffix);\n");
      out.write("    else \n");
      out.write("    {  theField.value = normalizedCCN\n");
      out.write("       return true\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("/*  ================================================================\n");
      out.write("    Credit card verification functions\n");
      out.write("    Originally included as Starter Application 1.0.0 in LivePayment.\n");
      out.write("    20 Feb 1997 modified by egk:\n");
      out.write("           changed naming convention to initial lowercase\n");
      out.write("                  (isMasterCard instead of IsMasterCard, etc.)\n");
      out.write("           changed isCC to isCreditCard\n");
      out.write("           retained functions named with older conventions from\n");
      out.write("                  LivePayment as stub functions for backward \n");
      out.write("                  compatibility only\n");
      out.write("           added \"AMERICANEXPRESS\" as equivalent of \"AMEX\" \n");
      out.write("                  for naming consistency \n");
      out.write("    ================================================================ */\n");
      out.write("\n");
      out.write("\n");
      out.write("/*  ================================================================\n");
      out.write("    FUNCTION:  isCreditCard(st)\n");
      out.write(" \n");
      out.write("    INPUT:     st - a string representing a credit card number\n");
      out.write("\n");
      out.write("    RETURNS:  true, if the credit card number passes the Luhn Mod-10\n");
      out.write("                    test.\n");
      out.write("              false, otherwise\n");
      out.write("    ================================================================ */\n");
      out.write("\n");
      out.write("function isCreditCard(st) {\n");
      out.write("  // Encoding only works on cards with less than 19 digits\n");
      out.write("  if (st.length > 19)\n");
      out.write("    return (false);\n");
      out.write("\n");
      out.write("  sum = 0; mul = 1; l = st.length;\n");
      out.write("  for (i = 0; i < l; i++) {\n");
      out.write("    digit = st.substring(l-i-1,l-i);\n");
      out.write("    tproduct = parseInt(digit ,10)*mul;\n");
      out.write("    if (tproduct >= 10)\n");
      out.write("      sum += (tproduct % 10) + 1;\n");
      out.write("    else\n");
      out.write("      sum += tproduct;\n");
      out.write("    if (mul == 1)\n");
      out.write("      mul++;\n");
      out.write("    else\n");
      out.write("      mul--;\n");
      out.write("  }\n");
      out.write("// Uncomment the following line to help create credit card numbers\n");
      out.write("// 1. Create a dummy number with a 0 as the last digit\n");
      out.write("// 2. Examine the sum written out\n");
      out.write("// 3. Replace the last digit with the difference between the sum and\n");
      out.write("//    the next multiple of 10.\n");
      out.write("\n");
      out.write("//  document.writeln(\"<BR>Sum      = \",sum,\"<BR>\");\n");
      out.write("//  alert(\"Sum      = \" + sum);\n");
      out.write("\n");
      out.write("  if ((sum % 10) == 0)\n");
      out.write("    return (true);\n");
      out.write("  else\n");
      out.write("    return (false);\n");
      out.write("\n");
      out.write("} // END FUNCTION isCreditCard()\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("/*  ================================================================\n");
      out.write("    FUNCTION:  isVisa()\n");
      out.write(" \n");
      out.write("    INPUT:     cc - a string representing a credit card number\n");
      out.write("\n");
      out.write("    RETURNS:  true, if the credit card number is a valid VISA number.\n");
      out.write("                    \n");
      out.write("              false, otherwise\n");
      out.write("\n");
      out.write("    Sample number: 4111 1111 1111 1111 (16 digits)\n");
      out.write("    ================================================================ */\n");
      out.write("\n");
      out.write("function isVisa(cc)\n");
      out.write("{\n");
      out.write("  if (((cc.length == 16) || (cc.length == 13)) &&\n");
      out.write("      (cc.substring(0,1) == 4))\n");
      out.write("    return isCreditCard(cc);\n");
      out.write("  return false;\n");
      out.write("}  // END FUNCTION isVisa()\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("/*  ================================================================\n");
      out.write("    FUNCTION:  isMasterCard()\n");
      out.write(" \n");
      out.write("    INPUT:     cc - a string representing a credit card number\n");
      out.write("\n");
      out.write("    RETURNS:  true, if the credit card number is a valid MasterCard\n");
      out.write("                    number.\n");
      out.write("                    \n");
      out.write("              false, otherwise\n");
      out.write("\n");
      out.write("    Sample number: 5500 0000 0000 0004 (16 digits)\n");
      out.write("    ================================================================ */\n");
      out.write("\n");
      out.write("function isMasterCard(cc)\n");
      out.write("{\n");
      out.write("  firstdig = cc.substring(0,1);\n");
      out.write("  seconddig = cc.substring(1,2);\n");
      out.write("  if ((cc.length == 16) && (firstdig == 5) &&\n");
      out.write("      ((seconddig >= 1) && (seconddig <= 5)))\n");
      out.write("    return isCreditCard(cc);\n");
      out.write("  return false;\n");
      out.write("\n");
      out.write("} // END FUNCTION isMasterCard()\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("function IsBug(s) {\n");
      out.write("\tif (isEmpty(s)) {\n");
      out.write("\t\treturn defaultEmptyOK;\n");
      out.write("\t}\n");
      out.write("\tvar string_arr = s.split(\" \");\n");
      out.write("\tfor (i = 0; i < string_arr.length; i++ ) {\n");
      out.write("\t\tif ( ! isWhitespace(string_arr[i]) ) {\n");
      out.write("\t\t\tif ( ! reBugId.test(string_arr[i]) ) {\n");
      out.write("\t\t\t\treturn false;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\treturn true;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function Print() {\n");
      out.write("\tif ( window.print ) {\n");
      out.write("\t\twindow.print(false, 1,1,true);\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("function IsURL(s) {\n");
      out.write("\tvar regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/\n");
      out.write("\treturn regexp.test(s);\n");
      out.write("}\n");
      out.write('\n');
      out.write("function submitNewForm(form, url){\n");
      out.write("\tfor ( var i=0; i < form.elements.length; i++) {\n");
      out.write("\t\tif ( (form.elements[i].type == \"radio\" || form.elements[i].type == \"checkbox\") && form.elements[i].checked == false ) {\n");
      out.write("\t\t\tcontinue;\t\n");
      out.write("\t\t}\n");
      out.write("\t\tif ( i != form.elements.length - 1 )\n");
      out.write("\t\t\turl += '&';\n");
      out.write("\t\tif ( form.elements[i].type == \"select-multiple\" ) {\n");
      out.write("\t\t\tvar selectedText = \"\";\n");
      out.write("\t\t\tfor ( var j = 0; j < form.elements[i].options.length; j++ ) {\n");
      out.write("\t\t\t\tif (form.elements[i].options[j].selected)\n");
      out.write("\t\t\t\t\tselectedText += form.elements[i].options[j].value + \" \";\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\turl += form.elements[i].name + '=' + escape(selectedText);\n");
      out.write("\t\t}\n");
      out.write("\t\telse {\t\n");
      out.write("\t\t\turl += form.elements[i].name + '=' + escape(form.elements[i].value);\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\tOpenWin = window.open(url, \"CtrlWindow\", \"toolbar=no,menubar=no,location=no,scrollbars=yes,resizable=yes\");\n");
      out.write("}\n");
      out.write("\n");
      out.write("function start(page) {\n");
      out.write("\tOpenWin = window.open(page, \"CtrlWindow\", \"toolbar=no,menubar=no,location=no,scrollbars=yes,resizable=yes\");\n");
      out.write("}\n");
      out.write("\n");
      out.write("function change(form, elementsToChange, myname) {\n");
      out.write("       var nameOfElement = new String(elementsToChange);\n");
      out.write("       var changeTo;\n");
      out.write("\tfor ( var i=0; i < form.elements.length; i++) {\n");
      out.write("\t\tif (form.elements[i].type == \"select-one\")\n");
      out.write("\t\t{\n");
      out.write("\t\t\tif ( form.elements[i].name == myname ) {\n");
      out.write("\t\t\t\tchangeTo = form.elements[i].value;\n");
      out.write("\t\t\t\tbreak;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\telse if ( form.elements[i].type == \"checkbox\" ) \n");
      out.write("\t\t{\n");
      out.write("\t\t  \tif ( form.elements[i].name == myname ) {\n");
      out.write("\t\t\t\tchangeTo = form.elements[i].checked;\n");
      out.write("\t\t\t\tbreak;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\tfor ( var i=0; i < form.elements.length; i++) {\n");
      out.write("\t\tif (form.elements[i].type == \"select-one\")\n");
      out.write("\t\t{\n");
      out.write("\t\t\tlen=nameOfElement.length;\n");
      out.write("\t\t\tif ( form.elements[i].name.substring(0,len) == nameOfElement ) {\n");
      out.write("\t\t\t\tform.elements[i].value = changeTo; \n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\telse if (form.elements[i].type == \"checkbox\")\n");
      out.write("\t\t{\n");
      out.write("\t\t\tlen=nameOfElement.length;\n");
      out.write("\t\t\tif ( form.elements[i].name.substring(0,len) == nameOfElement ) {\n");
      out.write("\t\t\t\tform.elements[i].checked = changeTo; \n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("// Compare two options within a list by VALUES\n");
      out.write("function compareOptionValues(a, b) \n");
      out.write("\n");
      out.write("{ \n");
      out.write("\n");
      out.write("  // Radix 10: for numeric values\n");
      out.write("\n");
      out.write("  // Radix 36: for alphanumeric values\n");
      out.write("\n");
      out.write("  var sA = parseInt( a.value, 36 );  \n");
      out.write("\n");
      out.write("  var sB = parseInt( b.value, 36 );  \n");
      out.write("\n");
      out.write("  return sA - sB;\n");
      out.write("\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Compare two options within a list by TEXT\n");
      out.write("function compareOptionText(a, b) \n");
      out.write("\n");
      out.write("{ \n");
      out.write("\n");
      out.write("  // Radix 10: for numeric values\n");
      out.write("\n");
      out.write("  // Radix 36: for alphanumeric values\n");
      out.write("\n");
      out.write("  var sA = parseInt( a.text, 36 );  \n");
      out.write("\n");
      out.write("  var sB = parseInt( b.text, 36 );  \n");
      out.write("\n");
      out.write("  return sA - sB;\n");
      out.write("\n");
      out.write("}\n");
      out.write("// Dual list move function\n");
      out.write("\n");
      out.write("function moveDualList( srcList, destList, moveAll ) \n");
      out.write("\n");
      out.write("{\n");
      out.write("\n");
      out.write("  // Do nothing if nothing is selected\n");
      out.write("\n");
      out.write("  if (  ( srcList.selectedIndex == -1 ) && ( moveAll == false )   )\n");
      out.write("\n");
      out.write("  {\n");
      out.write("\n");
      out.write("    return;\n");
      out.write("\n");
      out.write("  }\n");
      out.write("  newDestList = new Array( destList.options.length );\n");
      out.write("  var len = 0;\n");
      out.write("  for( len = 0; len < destList.options.length; len++ ) \n");
      out.write("\n");
      out.write("  {\n");
      out.write("\n");
      out.write("    if ( destList.options[ len ] != null )\n");
      out.write("\n");
      out.write("    {\n");
      out.write("\n");
      out.write("      newDestList[ len ] = new Option( destList.options[ len ].text, destList.options[ len ].value, destList.options[ len ].defaultSelected, destList.options[ len ].selected );\n");
      out.write("\n");
      out.write("    }\n");
      out.write("\n");
      out.write("  }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("  for( var i = 0; i < srcList.options.length; i++ ) \n");
      out.write("\n");
      out.write("  { \n");
      out.write("\n");
      out.write("    if ( srcList.options[i] != null && ( srcList.options[i].selected == true || moveAll ) )\n");
      out.write("\n");
      out.write("    {\n");
      out.write("\n");
      out.write("       // Statements to perform if option is selected\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("       // Incorporate into new list\n");
      out.write("\n");
      out.write("       newDestList[ len ] = new Option( srcList.options[i].text, srcList.options[i].value, srcList.options[i].defaultSelected, srcList.options[i].selected );\n");
      out.write("\n");
      out.write("       len++;\n");
      out.write("\n");
      out.write("    }\n");
      out.write("\n");
      out.write("  }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("  // Sort out the new destination list\n");
      out.write("\n");
      out.write("  newDestList.sort( compareOptionValues );   // BY VALUES\n");
      out.write("\n");
      out.write("  // Populate the destination with the items from the new array\n");
      out.write("\n");
      out.write("  for ( var j = 0; j < newDestList.length; j++ ) \n");
      out.write("\n");
      out.write("  {\n");
      out.write("\n");
      out.write("    if ( newDestList[ j ] != null )\n");
      out.write("\n");
      out.write("    {\n");
      out.write("\n");
      out.write("      destList.options[ j ] = newDestList[ j ];\n");
      out.write("\n");
      out.write("    }\n");
      out.write("\n");
      out.write("  }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("  // Erase source list selected elements\n");
      out.write("\n");
      out.write("  for( var i = srcList.options.length - 1; i >= 0; i-- ) \n");
      out.write("\n");
      out.write("  { \n");
      out.write("\n");
      out.write("    if ( srcList.options[i] != null && ( srcList.options[i].selected == true || moveAll ) )\n");
      out.write("\n");
      out.write("    {\n");
      out.write("\n");
      out.write("       // Erase Source\n");
      out.write("\n");
      out.write("       //srcList.options[i].value = \"\";\n");
      out.write("\n");
      out.write("       //srcList.options[i].text  = \"\";\n");
      out.write("\n");
      out.write("       srcList.options[i]       = null;\n");
      out.write("\n");
      out.write("    }\n");
      out.write("\n");
      out.write("  }\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("/***********************************************\n");
      out.write("* Dolphin Tabs Menu- by JavaScript Kit (www.javascriptkit.com)\n");
      out.write("* This notice must stay intact for usage\n");
      out.write("* Visit JavaScript Kit at http://www.javascriptkit.com/ for this script and 100s more\n");
      out.write("***********************************************/\n");
      out.write("\n");
      out.write("var dolphintabs={\n");
      out.write("\tsubcontainers:[], last_accessed_tab:null,\n");
      out.write("\n");
      out.write("\trevealsubmenu:function(curtabref){\n");
      out.write("\tthis.hideallsubs()\n");
      out.write("\tif (this.last_accessed_tab!=null)\n");
      out.write("\t\tthis.last_accessed_tab.className=\"\"\n");
      out.write("\tif (curtabref.getAttribute(\"rel\")) //If there's a sub menu defined for this tab item, show it\n");
      out.write("\tdocument.getElementById(curtabref.getAttribute(\"rel\")).style.display=\"block\"\n");
      out.write("\tcurtabref.className=\"current\"\n");
      out.write("\tthis.last_accessed_tab=curtabref\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\thideallsubs:function(){\n");
      out.write("\tfor (var i=0; i<this.subcontainers.length; i++)\n");
      out.write("\t\tdocument.getElementById(this.subcontainers[i]).style.display=\"none\"\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\n");
      out.write("\tinit:function(menuId, selectedIndex){\n");
      out.write("\tvar tabItems=document.getElementById(menuId).getElementsByTagName(\"a\")\n");
      out.write("\t\tfor (var i=0; i<tabItems.length; i++){\n");
      out.write("\t\t\tif (tabItems[i].getAttribute(\"rel\"))\n");
      out.write("\t\t\t\tthis.subcontainers[this.subcontainers.length]=tabItems[i].getAttribute(\"rel\") //store id of submenu div of tab menu item\n");
      out.write("\t\t\tif (i==selectedIndex){ //if this tab item should be selected by default\n");
      out.write("\t\t\t\ttabItems[i].className=\"current\"\n");
      out.write("\t\t\t\tthis.revealsubmenu(tabItems[i])\n");
      out.write("\t\t\t}\n");
      out.write("\t\ttabItems[i].onmouseover=function(){\n");
      out.write("\t\tdolphintabs.revealsubmenu(this)\n");
      out.write("\t\t}\n");
      out.write("\t\t} //END FOR LOOP\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("function validateForm(form) \n");
      out.write("{\n");
      out.write("\treturn true;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function downloadValidateForm(form) \n");
      out.write("{\n");
      out.write("    return true;\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<link href=\"/aprmarathon/jsp/css/main.css\" rel=\"stylesheet\" type=\"text/css\" />\n");
      out.write("<link href=\"/aprmarathon/jsp/css/dropdown.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\" />\n");
      out.write("<link href=\"/aprmarathon/jsp/css/default.ultimate.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\" />\n");
      out.write("<body>\n");
      out.write("<!--\n");
      out.write("\t@(#)@(#)Navigation.jsp\t1.1 04/03/12\n");
      out.write("\n");
      out.write("\tProject Name Project\n");
      out.write("\n");
      out.write("\tAuthor: Govind Thirumalai\n");
      out.write("\n");
      out.write("-->\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n");
      out.write("        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n");
      out.write("\t\t\n");
      out.write("\n");
      out.write("  ");
      app.appui.AppUtilBean AppUtilBean = null;
      synchronized (session) {
        AppUtilBean = (app.appui.AppUtilBean) _jspx_page_context.getAttribute("AppUtilBean", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (AppUtilBean == null){
          AppUtilBean = new app.appui.AppUtilBean();
          _jspx_page_context.setAttribute("AppUtilBean", AppUtilBean, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("AppUtilBean"), request);
      out.write("\n");
      out.write("\n");
      out.write("      <HTML>\n");
      out.write("\t");
      out.write("<TABLE WIDTH=\"100%\" BORDER=\"0\" CELLPADDING=\"0\" CELLSPACING=\"0\" STYLE=\"page-break-before: always\">\n");
      out.write("  <COL WIDTH=28*>\n");
      out.write("  <COL WIDTH=171*>\n");
      out.write("  <COL WIDTH=57*>\n");
      out.write("  <TR>\n");
      out.write("\t<TD WIDTH=\"11%\" HEIGHT=\"1 VALIGN=\"top\">\n");
      out.write("\t    <P><IMG SRC=\"/aprmarathon/jsp/images/t.gif\" ALIGN=BOTTOM WIDTH=1 HEIGHT=1 BORDER=0></P>\n");
      out.write("\t</TD>\n");
      out.write("    \t<TD WIDTH=\"78%\"></TD>\n");
      out.write("    \t<TD WIDTH=\"11%\"></TD>\n");
      out.write("  </TR>\n");
      out.write("  <TR>\n");
      out.write("\t  <TD WIDTH=11% VALIGN=TOP>\n");
      out.write("\t    <P><IMG SRC=\"/aprmarathon/jsp/images/header_logo.gif\" ALIGN=BOTTOM WIDTH=\"105\" HEIGHT=\"79\" BORDER=0></P>\n");
      out.write("\t  </TD>\n");
      out.write("\t  <TD WIDTH=78%>\n");
      out.write("\t    ");
      out.write("<center>\n");
      out.write("\t<table border=0 width=100% height=79>\n");
      out.write("\t<tr>\n");
      out.write("\t\t<td><P></P></td>\n");
      out.write("\t</tr>\n");
      out.write("\t</table>\n");
      out.write("</center>\n");
      out.write("</TD>\n");
      out.write("\t  <TD WIDTH=11% VALIGN=TOP>\n");
      out.write("\t    <IMG SRC=\"/aprmarathon/jsp/images/small_header_top.gif\" ALIGN=RIGHT>\n");
      out.write("\t  </TD>\n");
      out.write("\t</TR>\n");
      out.write("</table>\n");
      out.write("\n");
      out.write("<table border=0 cellpadding=0 cellspacing=0 width=100% >\n");
      out.write("\t<tr>\n");
      out.write("\t\t<td width=\"100%\" bgcolor=\"#3368B7\"><img src=\"/aprmarathon/jsp/images/t.gif\" width=5 height=15 border=0</td>\n");
      out.write("\t</tr>\n");
      out.write("</table>\n");
      out.write("\n");
      out.write("\t<table border=0 cellpadding=0 cellspacing=0 width=100% >\n");
      out.write("\t<tr>\n");
      out.write("\t<td width=\"100%\" bgcolor=\"#000000\"><img src=\"/aprmarathon/jsp/images/t.gif\" width=5 height=5 border=0</td>\n");
      out.write("\t</tr>\n");
      out.write("        <tr>\n");
      out.write("\t<td>");
 String buf = "";
	      AppUtilBean aub = new AppUtilBean();
	      int usersId = aub.getLoggedUserId(request);
	      AppMenuBuilder amb = new AppMenuBuilder(usersId); 
	      buf = amb.renderMenu();
	      
      out.write(" \n");
      out.write("\t      \n");
      out.write("\t      ");
      out.print( buf );
      out.write("\n");
      out.write("\t</td>\n");
      out.write("        </tr>\n");
      out.write("        </table>\n");
      out.write("\t<table>\n");
      out.write("\t  <tr>\n");
      out.write("\t    <td><img src=\"/aprmarathon/jsp/images/t.gif\" height=\"20\">\n");
      out.write("\t    </td>\n");
      out.write("\t  </tr>\n");
      out.write("\t</table>\n");
      out.write("\t<b>");
      out.print( AppUtilBean.getLoggedUsername(request) );
      out.write("</b>\n");
      out.write("\n");
      out.write("\t<br>\n");
      out.write("\t</CENTER>\n");
      out.write("      </HTML>\n");
      out.write("\n");
      out.write("\n");
      out.write("<form action=");
      out.print( Util.getBaseurl() );
      out.write(" method=post enctype=\"multipart/form-data\">\n");
 BloodGroupBean.getRequestParameters(request); 
      out.write('\n');
      out.print( core.appui.UtilBean.getSaveProfileFlag() );
      out.write('\n');
      out.print( core.appui.UtilBean.getDownloadFlag() );
      out.write('\n');
      out.print( core.appui.UtilBean.getHiddenField(Constants.SS_IMPL_NAME_STR, AppConstants.BLOODGROUP_BEAN_NAME_STR) );
      out.write('\n');
      out.print( core.appui.UtilBean.getNextJsp(AppConstants.MANAGE_BLOODGROUP_JSP_STR) );
      out.write('\n');
      out.print( BloodGroupBean.getBloodGroupInfo() );
      out.write("\n");
      out.write("</form>\n");
      out.write("<table>\n");
      out.write("<tr>\n");
      out.write("<td><img src=\"/aprmarathon/jsp/images/t.gif\" height=\"70\">\n");
      out.write("</td>\n");
      out.write("</tr>\n");
      out.write("</table>\n");
      out.write("<table border=0 cellpadding=0 cellspacing=0 width=100%>\n");
      out.write(" \t<tr>\n");
      out.write("\t\t<td width=100% height=3 colspan=\"3\" valign=\"top\" background=\"/aprmarathon/jsp/images/bottomline.gif\"><img src=\"/aprmarathon/images/t.gif\" width=\"1\" height=\"1\" border=\"0\"></td>\n");
      out.write("\t</tr>\n");
      out.write("\t<tr>\n");
      out.write("\t\t<td height=\"20\" colspan=\"2\" valign=\"top\" bgcolor=\"#F4F2F2\"><img src=\"/aprmarathon/jsp/images/t.gif\" width=5 height=80 border=0><span class=\"dev_by\">Powered by-</span> <span class=\"dev_by\">APR Charitable Trust</span></td>\n");
      out.write("\t\t<td align=\"left\" valign=\"top\" bgcolor=\"#F4F2F2\" id=\"copyright\"><div align=\"left\"><span class=\"dev_by\"> </span><span class=\"dev_by\"></span></div></td>\n");
      out.write("\t</tr>\n");
      out.write("\t<tr>\n");
      out.write("\t\t<td height=\"25\" bgcolor=\"#3368B7\"><img src=\"/aprmarathon/jsp/images/t.gif\" width=5 height=25 border=0 alt=\"APR Charitable Trust\"></td>\n");
      out.write(" \t\t<td colspan=\"2\" align=\"right\" bgcolor=\"#3368B7\" id=\"copyright\">&copy; 2017 APR Charitable Trust</td>\n");
      out.write("\t</tr>\n");
      out.write("</table>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
